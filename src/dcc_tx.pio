
.program dcc_tx

// using two pins
// - first outputs DCC signal
// - second outputs inverted DCC signal
.define public num_pin 2
// high pins value:
// - first pin set to high
// - second pin set to low (inverted) 
.define public high 0b00001
// low pins value:
// - first pin set to low
// - second pin set to high (inverted) 
.define public low 0b00010

; DCC bit transmission
; Bit = 1: 116us ( 58us high +  58us low signal) 
; Bit = 0: 200us (100us high + 100us low signal)

; http://normen.railcommunity.de/RCN-210.pdf

; state machine frequency: 500 000 HZ (2us per instruction):
; ->  58us signal equals 29 instructions
; -> 100us signal equals 50 instructions

loop:                       ; 
    set pins high    [26]   ; set high signal
    out x, 1                ; shift msb (left) bit into x
    jmp !x long             ; if bit = 0 jump to long signal
    set pins low     [27]   ; set low signal (short signal)
    jmp loop                ; end of short signal
long:                       ;
    nop              [20]   ; extend high signal to 100us
    set pins low     [31]   ; set low signal (long signal)
    nop              [17]   ; ...cont

% c-sdk {
#include "hardware/clocks.h"

static const uint64_t freq = 500000; // state machine frequency: 500 000 HZ (2us per instruction)

static inline void dcc_tx_program_init(PIO pio, uint sm, uint offset, uint base_pin) {
    for (uint i = 0; i < dcc_tx_num_pin; i++) {
        pio_gpio_init(pio, base_pin + i);
    }
    
    pio_sm_set_consecutive_pindirs(pio, sm, base_pin, dcc_tx_num_pin, true);
    
    pio_sm_config c = dcc_tx_program_get_default_config(offset);

    // OUT shifts to left (msb first), autopull, threshold 32 bits 
    sm_config_set_out_shift(&c, false, true, 32);
    // SET pins
    sm_config_set_set_pins(&c, base_pin, dcc_tx_num_pin);
    
    // No RX, so join RX fifo to TX fifo (in total 8 words)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Set clock divider
    uint64_t div = ((uint64_t)clock_get_hz(clk_sys) << 8) / freq;
    uint16_t div_int  = div >> 8;
    uint8_t  div_frac = div & 0xff;
    sm_config_set_clkdiv_int_frac(&c, div_int, div_frac);
    
    // Finally init state machine 
    pio_sm_init(pio, sm, offset, &c);
}

static inline void dcc_tx_program_set_enabled(PIO pio, uint sm, bool enabled) {
    pio_sm_set_enabled(pio, sm, enabled);
}

static inline void dcc_tx_program_put(PIO pio, uint sm, uint32_t w) {
    pio_sm_put_blocking(pio, sm, w);
}

%}
