
.define public dcc_tx_high    0b00101; // DCC high, power on
.define public dcc_tx_low     0b00110; // DCC low,  power on
.define public dcc_tx_off     0b01010; // DCC low,  power off

; DCC bit transmission
; Bit = 1: 116us ( 58us high +  58us low signal) 
; Bit = 0: 200us (100us high + 100us low signal)

; http://normen.railcommunity.de/RCN-210.pdf

; default DCC signal
.program dcc_tx_def

; state machine frequency: 500 000 HZ (2us per instruction):
; ->  58us signal equals  29 instructions
; -> 100us signal equals  50 instructions

loop:                               ; 
    set pins dcc_tx_high    [26]    ; set high signal
    out x, 1                        ; shift msb (left) bit into x
    jmp !x long                     ; if bit = 0 jump to long signal
    set pins dcc_tx_low     [27]    ; set low signal (short signal)
    jmp loop                        ; end of short signal
long:                               ;
    nop                     [20]    ; extend high signal to 100us
    set pins dcc_tx_low     [31]    ; set low signal (long signal)
    nop                     [17]    ; ...cont

; DCC signal + BiDi coutout
.program dcc_tx_bidi

; state machine frequency: 1 000 000 HZ (1us per instruction):
; ->  58us signal equals  58 instructions
; -> 100us signal equals 100 instructions

; high (min 26us) -> cutout (min 416) -> low (10us before 5th sync bit)
    set pins dcc_tx_high            ;             1  (set high signal)
    pull                            ;             1  (pull next word)
    out y, 9                [21]    ;  1 + 21 =  22  (shift number of bits - 1 into y)

    out x, 3                        ;             1  (shift add idle cycles into x)
ts:
    jmp x--, ts                     ;             1  (ts loop)
    ; start cutout earliest after 26us
    set pins dcc_tx_off             ;             1  (start cutout after min 26us)
    out x, 9                        ;             1  (shift cutout idle cycles into x)
tc:
    jmp x--, tc                     ;             1  (tc loop)
    ; stop cutout
    set pins dcc_tx_low      [7]    ;  1  +  7 =  8  (stop cutout phase)
    out x, 3                        ;             1  (shift additional wait cycles into x)
te:
    jmp x--, te                     ;             1  (te loop)
    ; spend at least 10us after end cutout

;   remaining sync bits and DCC data bits
bit:                                ;                (jump address for next bit)
    set pins dcc_tx_high    [31]    ;  1 + 31 =  32  (set high signal)
    out x, 1                [24]    ;  1 + 24 =  25  (shift msb (left) bit into x)
    jmp !x long                     ;             1  (if bit = 0 jump to long signal)
    set pins dcc_tx_low     [24]    ;  1 + 24 =  25  (set low signal (short signal))
    jmp end                         ;             1
long:                               ;                (jump address for long signals)
    nop                     [31]    ;  1 + 31 =  32  (extend high signal to 100us)
    nop                      [9]    ;  1 +  9 =  10  (...cont)
    set pins dcc_tx_low     [31]    ;  1 + 31 =  32  (set low signal (long signal))
    nop                     [31]    ;  1 + 31 =  32  (...cont)
    nop                      [3]    ;  1 +  3 =   4  (...cont)
end:
    jmp y--, bit            [31]    ;  1 + 31 =  32  (jump to next bit)

% c-sdk {
%}
